mean(arima1_rmse_train)
mean(arima1_rmse_test)
mean(arima1_mape_train)
mean(arima1_mape_test)
## Set validation days
numValid = 30
## Create empty vectors to store results
arima1_mape_train = rep(NA,numValid)
arima1_mape_test = rep(NA, numValid)
arima1_rmse_train = rep(NA,numValid)
arima1_rmse_test = rep(NA, numValid)
for(i in 1:numValid){
# Split the data into training and validation
nTrain = length(pre_covid_train) + i
train.ts = window(pre_covid, end = c(2018, nTrain+196))
# Fit the SARIMA(0,1,1)(0,1,1)[7] model
arima1 = Arima(train.ts, order=c(0,1,0), seasonal = list(order=c(1,1,0), period=7))
# Make prediction
pred = forecast(arima1, h=numValid)
# Store the MAPE (Testing MAPE is the 10th value)
arima1_mape_train[i] = summary(arima1)[5]
arima1_mape_test[i] = accuracy(pred$mean, pre_covid_valid[i:i+numValid])[5]
arima1_rmse_train[i] = summary(arima1)[2]
arima1_rmse_test[i] = accuracy(pred$mean, pre_covid_valid[i:i+numValid])[2]
}
# Average of the training and testing MAPE is the error of the model
mean(arima1_rmse_train)
mean(arima1_rmse_test)
mean(arima1_mape_train)
mean(arima1_mape_test)
pre_covid_arima = Arima(pre_covid, order=c(0,1,1), seasonal = list(order=c(0,1,1), period=7))
pre_covid_arima_forecast = forecast(pre_covid_arima, h=length(covid))
autoplot(pre_covid, main = "Observed v.s. Predicted Using Pre-covid data") +
autolayer(covid, series = "Observed")+
autolayer(pre_covid_arima_forecast, series = "Predicted", level=0)+
ylim(100, 140)
## Set validation days
numValid = 30
## Create empty vectors to store results
arima1_mape_train = rep(NA,numValid)
arima1_mape_test = rep(NA, numValid)
arima1_rmse_train = rep(NA,numValid)
arima1_rmse_test = rep(NA, numValid)
for(i in 1:numValid){
# Split the data into training and validation
nTrain = length(pre_covid_train) + i
train.ts = window(pre_covid, end = c(2018, nTrain+196))
# Fit the SARIMA(0,1,1)(0,1,1)[7] model
arima1 = Arima(train.ts, order=c(0,1,0), seasonal = list(order=c(1,1,1), period=7))
# Make prediction
pred = forecast(arima1, h=numValid)
# Store the MAPE (Testing MAPE is the 10th value)
arima1_mape_train[i] = summary(arima1)[5]
arima1_mape_test[i] = accuracy(pred$mean, pre_covid_valid[i:i+numValid])[5]
arima1_rmse_train[i] = summary(arima1)[2]
arima1_rmse_test[i] = accuracy(pred$mean, pre_covid_valid[i:i+numValid])[2]
}
# Average of the training and testing MAPE is the error of the model
mean(arima1_rmse_train)
mean(arima1_rmse_test)
mean(arima1_mape_train)
mean(arima1_mape_test)
pre_covid_arima = Arima(pre_covid, order=c(0,1,1), seasonal = list(order=c(0,1,1), period=7))
pre_covid_arima_forecast = forecast(pre_covid_arima, h=length(covid))
autoplot(pre_covid, main = "Observed v.s. Predicted Using Pre-covid data") +
autolayer(covid, series = "Observed")+
autolayer(pre_covid_arima_forecast, series = "Predicted", level=0)+
ylim(100, 140)
## Set validation days
numValid = 30
## Create empty vectors to store results
arima1_mape_train = rep(NA,numValid)
arima1_mape_test = rep(NA, numValid)
arima1_rmse_train = rep(NA,numValid)
arima1_rmse_test = rep(NA, numValid)
for(i in 1:numValid){
# Split the data into training and validation
nTrain = length(pre_covid_train) + i
train.ts = window(pre_covid, end = c(2018, nTrain+196))
# Fit the SARIMA(0,1,1)(0,1,1)[7] model
arima1 = Arima(train.ts, order=c(1,1,1), seasonal = list(order=c(1,1,1), period=7))
# Make prediction
pred = forecast(arima1, h=numValid)
# Store the MAPE (Testing MAPE is the 10th value)
arima1_mape_train[i] = summary(arima1)[5]
arima1_mape_test[i] = accuracy(pred$mean, pre_covid_valid[i:i+numValid])[5]
arima1_rmse_train[i] = summary(arima1)[2]
arima1_rmse_test[i] = accuracy(pred$mean, pre_covid_valid[i:i+numValid])[2]
}
# Average of the training and testing MAPE is the error of the model
mean(arima1_rmse_train)
mean(arima1_rmse_test)
mean(arima1_mape_train)
mean(arima1_mape_test)
pre_covid_arima = Arima(pre_covid, order=c(0,1,0), seasonal = list(order=c(1,1,0), period=7))
pre_covid_arima_forecast = forecast(pre_covid_arima, h=length(covid))
autoplot(pre_covid, main = "Observed v.s. Predicted Using Pre-covid data") +
autolayer(covid, series = "Observed")+
autolayer(pre_covid_arima_forecast, series = "Predicted", level=0)+
ylim(100, 140)
pre_covid_arima = Arima(pre_covid, order=c(0,1,0), seasonal = list(order=c(1,1,1), period=7))
pre_covid_arima_forecast = forecast(pre_covid_arima, h=length(covid))
autoplot(pre_covid, main = "Observed v.s. Predicted Using Pre-covid data") +
autolayer(covid, series = "Observed")+
autolayer(pre_covid_arima_forecast, series = "Predicted", level=0)+
ylim(100, 140)
## Set validation days
numValid = 30
## Create empty vectors to store results
arima1_mape_train = rep(NA,numValid)
arima1_mape_test = rep(NA, numValid)
arima1_rmse_train = rep(NA,numValid)
arima1_rmse_test = rep(NA, numValid)
for(i in 1:numValid){
# Split the data into training and validation
nTrain = length(pre_covid_train) + i
train.ts = window(pre_covid, end = c(2018, nTrain+196))
# Fit the SARIMA(0,1,1)(0,1,1)[7] model
arima1 = Arima(train.ts, order=c(1,1,1), seasonal = list(order=c(1,1,1), period=7))
# Make prediction
pred = forecast(arima1, h=numValid)
# Store the MAPE (Testing MAPE is the 10th value)
arima1_mape_train[i] = summary(arima1)[5]
arima1_mape_test[i] = accuracy(pred$mean, pre_covid_valid[i:i+numValid])[5]
arima1_rmse_train[i] = summary(arima1)[2]
arima1_rmse_test[i] = accuracy(pred$mean, pre_covid_valid[i:i+numValid])[2]
}
# Average of the training and testing MAPE is the error of the model
mean(arima1_rmse_train)
mean(arima1_rmse_test)
mean(arima1_mape_train)
mean(arima1_mape_test)
pre_covid_arima = Arima(pre_covid, order=c(1,1,1), seasonal = list(order=c(1,1,1), period=7))
pre_covid_arima_forecast = forecast(pre_covid_arima, h=length(covid))
autoplot(pre_covid, main = "Observed v.s. Predicted Using Pre-covid data") +
autolayer(covid, series = "Observed")+
autolayer(pre_covid_arima_forecast, series = "Predicted", level=0)+
ylim(100, 140)
## Set validation days
numValid = 30
## Create empty vectors to store results
arima1_mape_train = rep(NA,numValid)
arima1_mape_test = rep(NA, numValid)
arima1_rmse_train = rep(NA,numValid)
arima1_rmse_test = rep(NA, numValid)
for(i in 1:numValid){
# Split the data into training and validation
nTrain = length(pre_covid_train) + i
train.ts = window(pre_covid, end = c(2018, nTrain+196))
# Fit the SARIMA(0,1,1)(0,1,1)[7] model
arima1 = Arima(train.ts, order=c(0,1,1), seasonal = list(order=c(0,1,1), period=7))
# Make prediction
pred = forecast(arima1, h=numValid)
# Store the MAPE (Testing MAPE is the 10th value)
arima1_mape_train[i] = summary(arima1)[5]
arima1_mape_test[i] = accuracy(pred$mean, pre_covid_valid[i:i+numValid])[5]
arima1_rmse_train[i] = summary(arima1)[2]
arima1_rmse_test[i] = accuracy(pred$mean, pre_covid_valid[i:i+numValid])[2]
}
# Average of the training and testing MAPE is the error of the model
mean(arima1_rmse_train)
mean(arima1_rmse_test)
mean(arima1_mape_train)
mean(arima1_mape_test)
# Train model for pre_covid
## Latest model is hw1
pre_covid_arima = Arima(pre_covid, order=c(0,1,1), seasonal = list(order=c(0,1,1), period=7))
## Forecast
pre_covid_arima_forecast = forecast(pre_covid_arima, h=length(covid))
pre_covid_arima_forecast
## Check accuracy and residuals
checkresiduals(pre_covid_arima_forecast$residuals)
accuracy(pre_covid_arima_forecast, covid)
error = abs(covid - pre_covid_arima_forecast$mean)
mean(error)
## Plot of validation data vs. observed values
autoplot(pre_covid) +
autolayer(covid, series = "Observed")+
autolayer(pre_covid_arima_forecast, series = "Predicted", level=0)+
ylim(100, 140)
# Train model for pre_covid
## Latest model is hw1
pre_covid_arima = Arima(pre_covid, order=c(0,1,1), seasonal = list(order=c(0,1,1), period=7))
## Forecast
pre_covid_arima_forecast = forecast(pre_covid_arima, h=length(covid))
pre_covid_arima_forecast
## Check accuracy and residuals
checkresiduals(pre_covid_arima_forecast$residuals)
accuracy(pre_covid_arima_forecast, covid)
error = abs(covid - pre_covid_arima_forecast$mean)
mean(error)
## Plot of validation data vs. observed values
autoplot(pre_covid) +
autolayer(covid, series = "Observed")+
autolayer(pre_covid_arima_forecast, series = "Predicted", level=0)+
ylim(100, 140)
# Train model for pre_covid
## Latest model is hw1
pre_covid_arima = Arima(pre_covid, order=c(0,1,1), seasonal = list(order=c(0,1,1), period=7))
length(covid)
# Train model for pre_covid
## Latest model is hw1
pre_covid_arima = Arima(pre_covid, order=c(0,1,1), seasonal = list(order=c(0,1,1), period=7))
## Forecast
pre_covid_arima_forecast = forecast(pre_covid_arima, h=length(covid))
pre_covid_arima_forecast
## Check accuracy and residuals
checkresiduals(pre_covid_arima_forecast$residuals)
accuracy(pre_covid_arima_forecast, covid)
error = abs(covid - pre_covid_arima_forecast$mean)
mean(error)
## Plot of validation data vs. observed values
autoplot(pre_covid) +
autolayer(covid, series = "Observed")+
autolayer(pre_covid_arima_forecast, series = "Predicted", level=0)+
ylim(100, 140)
pre-covid-arima
pre_covid_arima
length(covid)
## Forecast
pre_covid_arima_forecast = forecast(pre_covid_arima, h=176)
pre_covid_arima_forecast
## Check accuracy and residuals
checkresiduals(pre_covid_arima_forecast$residuals)
accuracy(pre_covid_arima_forecast, covid)
error = abs(covid - pre_covid_arima_forecast$mean)
mean(error)
## Plot of validation data vs. observed values
autoplot(pre_covid) +
autolayer(covid, series = "Observed")+
autolayer(pre_covid_arima_forecast, series = "Predicted", level=0)+
ylim(100, 140)
## Forecast
pre_covid_arima_forecast = forecast(pre_covid_arima, h=length(covid))
pre_covid_arima_forecast
## Check accuracy and residuals
checkresiduals(pre_covid_arima_forecast$residuals)
accuracy(pre_covid_arima_forecast, covid)
error = abs(covid - pre_covid_arima_forecast$mean)
mean(error)
## Plot of validation data vs. observed values
autoplot(pre_covid) +
autolayer(covid, series = "Observed")+
autolayer(pre_covid_arima_forecast, series = "Predicted", level=0)+
ylim(100, 140)
## Forecast
pre_covid_arima_forecast = forecast(pre_covid_arima, h=length(covid))
pre_covid_arima_forecast
## Check accuracy and residuals
checkresiduals(pre_covid_arima_forecast$residuals)
accuracy(pre_covid_arima_forecast, covid)
error = abs(covid - pre_covid_arima_forecast$mean)
mean(error)
## Plot of validation data vs. observed values
autoplot(pre_covid) +
autolayer(covid, series = "Observed")+
autolayer(pre_covid_arima_forecast, series = "Predicted")+
ylim(100, 140)
View(data)
View(data)
nValid2 = 60
nTrain2 = length(price.ts)-nValid2
price_train = window(price.ts, end = c(2018,nTrain2+196),
frequency = 365)
price_valid = window(price.ts, start = c(2018,(nTrain2+197)),
frequency = 365)
## Set validation days
numValid = 30
## Create empty vectors to store results
arima1_mape_train = rep(NA,numValid)
arima1_mape_test = rep(NA, numValid)
arima1_rmse_train = rep(NA,numValid)
arima1_rmse_test = rep(NA, numValid)
for(i in 1:numValid){
# Split the data into training and validation
nTrain = length(price_train) + i
train.ts = window(price.ts, end = c(2018, nTrain+196))
# Fit the SARIMA(0,1,1)(0,1,1)[7] model
arima1 = Arima(train.ts, order=c(0,1,1), seasonal = list(order=c(0,1,1), period=7))
# Make prediction
pred = forecast(arima1, h=numValid)
# Store the MAPE (Testing MAPE is the 10th value)
arima1_mape_train[i] = summary(arima1)[5]
arima1_mape_test[i] = accuracy(pred$mean, pre_covid_valid[i:i+numValid])[5]
arima1_rmse_train[i] = summary(arima1)[2]
arima1_rmse_test[i] = accuracy(pred$mean, pre_covid_valid[i:i+numValid])[2]
}
# Average of the training and testing MAPE is the error of the model
mean(arima1_rmse_train)
mean(arima1_rmse_test)
mean(arima1_mape_train)
mean(arima1_mape_test)
nValid2 = 60
nTrain2 = length(price.ts)-nValid2
price_train = window(price.ts, end = c(2018,nTrain2+196),
frequency = 365)
price_valid = window(price.ts, start = c(2018,(nTrain2+197)),
frequency = 365)
nValid2 = 60
nTrain2 = length(price.ts)-nValid2
price_train = window(price.ts, end = c(2018,nTrain2+196),
frequency = 365)
price_valid = window(price.ts, start = c(2018,(nTrain2+197)),
frequency = 365)
## Set validation days
numValid = 30
## Create empty vectors to store results
arima1_mape_train = rep(NA,numValid)
arima1_mape_test = rep(NA, numValid)
arima1_rmse_train = rep(NA,numValid)
arima1_rmse_test = rep(NA, numValid)
for(i in 1:numValid){
# Split the data into training and validation
nTrain = length(price_train) + i
train.ts = window(price.ts, end = c(2018, nTrain+196))
# Fit the SARIMA(0,1,1)(0,1,1)[7] model
arima1 = Arima(train.ts, order=c(0,1,1), seasonal = list(order=c(0,1,1), period=7))
# Make prediction
pred = forecast(arima1, h=numValid)
# Store the MAPE (Testing MAPE is the 10th value)
arima1_mape_train[i] = summary(arima1)[5]
arima1_mape_test[i] = accuracy(pred$mean, pre_covid_valid[i:i+numValid])[5]
arima1_rmse_train[i] = summary(arima1)[2]
arima1_rmse_test[i] = accuracy(pred$mean, pre_covid_valid[i:i+numValid])[2]
}
# Average of the training and testing MAPE is the error of the model
mean(arima1_rmse_train)
mean(arima1_rmse_test)
mean(arima1_mape_train)
mean(arima1_mape_test)
## Construct the model
covid_arima = Arima(price.ts, order=c(0,1,1), seasonal = list(order=c(0,1,1), period=7))
## Forecast
covid_arima_forecast = forecast(covid_arima, h=30)
covid_arima_forecast
## Plot
autoplot(price.ts)+
autolayer(covid_arima_forecast, series = "Forecasted Aug. Price")
## Set validation days
numValid = 30
## Create empty vectors to store results
arima1_mape_train = rep(NA,numValid)
arima1_mape_test = rep(NA, numValid)
arima1_rmse_train = rep(NA,numValid)
arima1_rmse_test = rep(NA, numValid)
for(i in 1:numValid){
# Split the data into training and validation
nTrain = length(price_train) + i
train.ts = window(price.ts, end = c(2018, nTrain+196))
# Fit the SARIMA(0,1,1)(0,1,1)[7] model
arima1 = Arima(train.ts, order=c(0,1,1), seasonal = list(order=c(0,1,1), period=7))
# Make prediction
pred = forecast(arima1, h=numValid)
# Store the MAPE (Testing MAPE is the 10th value)
arima1_mape_train[i] = summary(arima1)[5]
arima1_mape_test[i] = accuracy(pred$mean, price_valid[i:i+numValid])[5]
arima1_rmse_train[i] = summary(arima1)[2]
arima1_rmse_test[i] = accuracy(pred$mean, price_valid[i:i+numValid])[2]
}
# Average of the training and testing MAPE is the error of the model
mean(arima1_rmse_train)
mean(arima1_rmse_test)
mean(arima1_mape_train)
mean(arima1_mape_test)
## Set validation days
numValid = 30
## Create empty vectors to store results
arima2_mape_train = rep(NA,numValid)
arima2_mape_test = rep(NA, numValid)
arima2_rmse_train = rep(NA,numValid)
arima2_rmse_test = rep(NA, numValid)
for(i in 1:numValid){
# Split the data into training and validation
nTrain = length(price_train) + i
train.ts = window(price.ts, end = c(2018, nTrain+196))
# Fit the SARIMA(0,1,1)(0,1,1)[7] model
arima2 = Arima(train.ts, order=c(0,1,0), seasonal = list(order=c(1,1,0), period=7))
# Make prediction
pred = forecast(arima2, h=numValid)
# Store the MAPE (Testing MAPE is the 10th value)
arima2_mape_train[i] = summary(arima2)[5]
arima2_mape_test[i] = accuracy(pred$mean, price_valid[i:i+numValid])[5]
arima2_rmse_train[i] = summary(arima2)[2]
arima2_rmse_test[i] = accuracy(pred$mean, price_valid[i:i+numValid])[2]
}
# Average of the training and testing MAPE is the error of the model
mean(arima2_rmse_train)
mean(arima2_rmse_test)
mean(arima2_mape_train)
mean(arima2_mape_test)
## Construct the model
covid_arima = Arima(price.ts, order=c(0,1,0), seasonal = list(order=c(1,1,0), period=7))
## Forecast
covid_arima_forecast = forecast(covid_arima, h=30)
covid_arima_forecast
## Plot
autoplot(price.ts, main="Forecasted Aug. Price")+
autolayer(covid_arima_forecast, series = "Forecasted Aug. Price")
## Set validation days
numValid = 30
## Create empty vectors to store results
arima3_mape_train = rep(NA,numValid)
arima3_mape_test = rep(NA, numValid)
arima3_rmse_train = rep(NA,numValid)
arima3_rmse_test = rep(NA, numValid)
for(i in 1:numValid){
# Split the data into training and validation
nTrain = length(price_train) + i
train.ts = window(price.ts, end = c(2018, nTrain+196))
# Fit the SARIMA(0,1,1)(0,1,1)[7] model
arima3 = Arima(train.ts, order=c(0,1,0), seasonal = list(order=c(1,1,1), period=7))
# Make prediction
pred = forecast(arima1, h=numValid)
# Store the MAPE (Testing MAPE is the 10th value)
arima3_mape_train[i] = summary(arima3)[5]
arima3_mape_test[i] = accuracy(pred$mean, price_valid[i:i+numValid])[5]
arima3_rmse_train[i] = summary(arima3)[2]
arima3_rmse_test[i] = accuracy(pred$mean, price_valid[i:i+numValid])[2]
}
# Average of the training and testing MAPE is the error of the model
mean(arima3_rmse_train)
mean(arima3_rmse_test)
mean(arima3_mape_train)
mean(arima3_mape_test)
## Construct the model
covid_arima = Arima(price.ts, order=c(0,1,0), seasonal = list(order=c(1,1,1), period=7))
## Forecast
covid_arima_forecast = forecast(covid_arima, h=30)
covid_arima_forecast
## Plot
autoplot(price.ts, main="Forecasted Aug. Price")+
autolayer(covid_arima_forecast, series = "Forecasted Aug. Price")
## Set validation days
numValid = 30
## Create empty vectors to store results
arima4_mape_train = rep(NA,numValid)
arima4_mape_test = rep(NA, numValid)
arima4_rmse_train = rep(NA,numValid)
arima4_rmse_test = rep(NA, numValid)
for(i in 1:numValid){
# Split the data into training and validation
nTrain = length(price_train) + i
train.ts = window(price.ts, end = c(2018, nTrain+196))
# Fit the SARIMA(0,1,1)(0,1,1)[7] model
arima4 = Arima(train.ts, order=c(1,1,1), seasonal = list(order=c(1,1,1), period=7))
# Make prediction
pred = forecast(arima1, h=numValid)
# Store the MAPE (Testing MAPE is the 10th value)
arima4_mape_train[i] = summary(arima4)[5]
arima4_mape_test[i] = accuracy(pred$mean, price_valid[i:i+numValid])[5]
arima4_rmse_train[i] = summary(arima4)[2]
arima4_rmse_test[i] = accuracy(pred$mean, price_valid[i:i+numValid])[2]
}
# Average of the training and testing MAPE is the error of the model
mean(arima4_rmse_train)
mean(arima4_rmse_test)
mean(arima4_mape_train)
mean(arima4_mape_test)
checkresiduals(covid_arima)
# import packages
library(zoo)
library(forecast)
library(ggplot2)
library(dplyr)
# read data
data = read.csv("cleaned_data.csv")
# set zoo object of price
price = zoo(data$price, seq(from = as.Date("2018-07-16"), to = as.Date("2020-07-16"), by = 1))
# plot the data
autoplot(price, xlab=("Time") , ylab=("Average listing price") )
# read data
data = read.csv("cleaned_data.csv")
# set zoo object of price
price = zoo(data$price, seq(from = as.Date("2018-07-16"), to = as.Date("2020-07-16"), by = 1))
# plot the data
autoplot(price, xlab=("Time") , ylab=("Average listing price") )+theme_void()
# read data
data = read.csv("cleaned_data.csv")
# set zoo object of price
price = zoo(data$price, seq(from = as.Date("2018-07-16"), to = as.Date("2020-07-16"), by = 1))
# plot the data
autoplot(price, xlab=("Time") , ylab=("Average listing price") )+theme_classic()
# read data
data = read.csv("cleaned_data.csv")
# set zoo object of price
price = zoo(data$price, seq(from = as.Date("2018-07-16"), to = as.Date("2020-07-16"), by = 1))
# plot the data
autoplot(price, xlab=("Time") , ylab=("Average listing price"))+theme_classic()
# read data
data = read.csv("cleaned_data.csv")
# set zoo object of price
price = zoo(data$price, seq(from = as.Date("2018-07-16"), to = as.Date("2020-07-16"), by = 1))
# plot the data
autoplot(price, xlab=("Time"), ylab=("Average listing price"))+theme_classic()
# read data
data = read.csv("cleaned_data.csv")
# set zoo object of price
price = zoo(data$price, seq(from = as.Date("2018-07-16"), to = as.Date("2020-07-16"), by = 1))
# plot the data
autoplot(price, xlab="Time", ylab="Average listing price")+theme_classic()
# read data
data = read.csv("cleaned_data.csv")
# set zoo object of price
price = zoo(data$price, seq(from = as.Date("2018-07-16"), to = as.Date("2020-07-16"), by = 1))
# plot the data
autoplot(price, xlab="Time", ylab="Average listing price")
# read data
data = read.csv("cleaned_data.csv")
# set zoo object of price
price = zoo(data$price, seq(from = as.Date("2018-07-16"), to = as.Date("2020-07-16"), by = 1))
# plot the data
autoplot(price, xlab=("Time"), ylab=("Average listing price"))
