setwd("~/Documents/GitHub/dso-522-airbnb-pricing-analysis")
# import packages
library(zoo)
# read data
data = read.csv("cleaned_data.csv")
# set zoo object of price
price = zoo(data$price, seq(from = as.Date("2018-07-16"), to = as.Date("2020-07-16"), by = 1))
# plot the data
autoplot(price) + xlab("Time") + ylab("Average listing price")
library(forecast)
library(forecast)
# read data
data = read.csv("cleaned_data.csv")
# set zoo object of price
price = zoo(data$price, seq(from = as.Date("2018-07-16"), to = as.Date("2020-07-16"), by = 1))
# plot the data
autoplot(price) + xlab("Time") + ylab("Average listing price")
# plot the data
autoplot(price, xlab=("Time") , ylab=("Average listing price")
library(forecast)
library(forecast)
# read data
data = read.csv("cleaned_data.csv")
# set zoo object of price
price = zoo(data$price, seq(from = as.Date("2018-07-16"), to = as.Date("2020-07-16"), by = 1))
# plot the data
autoplot(price, xlab=("Time") , ylab=("Average listing price") )
data
ma.trailing.roll = rollmean(price, k = 12, align = "right")
ma.trailing.roll = rollmean(price, k = 7, align = "right")
autoplot(jw.train,,main='Oakland Airbnb Pricing from 2018 to 2020',ylab='Airbnb Price')+
autolayer(ma.trailing.roll,series='Adjusted Weekly')
ma.trailing.roll = rollmean(price, k = 7, align = "right")
autoplot(price,main='Oakland Airbnb Pricing from 2018 to 2020',ylab='Airbnb Price')+
autolayer(ma.trailing.roll,series='Adjusted Weekly')
ma.trailing.roll = rollmean(price, k = 7, align = "right")
autoplot(price,main='Oakland Airbnb Pricing from 2018 to 2020',ylab='Airbnb Price')
ma.trailing.roll = rollmean(price, k = 7, align = "right")
autoplot(price,main='Oakland Airbnb Pricing from 2018 to 2020',
ylab='Airbnb Price')+
autolayer(ma.trailing.roll,series='Adjusted Weekly')
ma.trailing.roll
price.ts<-ts(price)
price.ts
price.ts<-ts(data$price,start=(7,16,2018))
price.ts<-ts(data$price,start=c(7,16,2018))
price.ts
price.ts<-ts(data$price,start=c(7,16,2018),frequency=365)
price.ts
library(forecast)
# read data
data = read.csv("cleaned_data.csv")
# set zoo object of price
price = zoo(data$price, seq(from = as.Date("2018-07-16"), to = as.Date("2020-07-16"), by = 1))
# plot the data
autoplot(price, xlab=("Time") , ylab=("Average listing price") )
head(price)
price
ma.trailing.roll = rollmean(price, k = 7, align = "right")
ma.trailing.roll
data
price.ts<-ts(data$price,frequency=365)
price.ts
price.ts<-ts(data$price,start=c(2018,7,16),frequency=365)
price.ts
autoplot(price.ts,main='Oakland Airbnb Pricing from 2018 to 2020',
ylab='Airbnb Price')+
autolayer(ma.trailing.roll,series='Adjusted Weekly')
autoplot(price.ts,main='Oakland Airbnb Pricing from 2018 to 2020',
ylab='Airbnb Price')
library(forecast)
# read data
data = read.csv("cleaned_data.csv")
# set zoo object of price
price = zoo(data$price, seq(from = as.Date("2018-07-16"), to = as.Date("2020-07-16"), by = 1))
# plot the data
autoplot(price, xlab=("Time") , ylab=("Average listing price") )
data
price.ts<-ts(data$price,start=c(2018,7,16),end=c(2020,7,16),frequency=365)
price.ts<-ts(data$price,start=c(2018,7,16),end=c(2020,7,16),frequency=365)
ma.trailing.roll = rollmean(price, k = 7, align = "right")
head(price)
autoplot(price.ts,main='Oakland Airbnb Pricing from 2018 to 2020',
ylab='Airbnb Price')
library(forecast)
# read data
data = read.csv("cleaned_data.csv")
# set zoo object of price
price = zoo(data$price, seq(from = as.Date("2018-07-16"), to = as.Date("2020-07-16"), by = 1))
# plot the data
autoplot(price, xlab=("Time") , ylab=("Average listing price") )
ma.trailing.roll = rollmean(price.ts, k = 7, align = "right")
ma.trailing.roll
head(price)
autoplot(price.ts,main='Oakland Airbnb Pricing from 2018 to 2020',
ylab='Airbnb Price')
autoplot(price.ts,main='Oakland Airbnb Pricing from 2018 to 2020',
ylab='Airbnb Price')+
autolayer(ma.trailing.roll)
autoplot(price.ts,main='Oakland Airbnb Pricing from 2018 to 2020',
ylab='Airbnb Price')+
autolayer(ma.trailing.roll,series='Weekly Aggregated')
data
library(forecast)
# read data
data = read.csv("cleaned_data.csv")
# set zoo object of price
price = zoo(data$price, seq(from = as.Date("2018-07-16"), to = as.Date("2020-07-16"), by = 1))
# plot the data
autoplot(price, xlab=("Time") , ylab=("Average listing price") )
price.ts<-ts(data$price,start=c(2018,7,16),end=c(2020,7,16),frequency=365)
ma.trailing.roll = rollmean(price.ts, k = 7, align = "right")
head(price)
autoplot(price.ts,main='Oakland Airbnb Pricing from 2018 to 2020',
ylab='Airbnb Price')+
autolayer(ma.trailing.roll,series='Weekly Aggregated')
price.ts<-ts(data$price,start=c(2018,7,16),frequency=365)
ma.trailing.roll = rollmean(price.ts, k = 7, align = "right")
head(price)
autoplot(price.ts,main='Oakland Airbnb Pricing from 2018 to 2020',
ylab='Airbnb Price')+
autolayer(ma.trailing.roll,series='Weekly Aggregated')
price.ts<-ts(data$price,start=c(2018,7,16),end=c(2020,7,16),frequency=365)
ma.trailing.roll = rollmean(price.ts, k = 7, align = "right")
head(price)
autoplot(price.ts,main='Oakland Airbnb Pricing from 2018 to 2020',
ylab='Airbnb Price')+
autolayer(ma.trailing.roll,series='Weekly Aggregated')
price.ts<-ts(data$price,start=c(2018,7),end=c(2020,7),frequency=365)
ma.trailing.roll = rollmean(price.ts, k = 7, align = "right")
head(price)
autoplot(price.ts,main='Oakland Airbnb Pricing from 2018 to 2020',
ylab='Airbnb Price')+
autolayer(ma.trailing.roll,series='Weekly Aggregated')
ma.trailing.roll
price.ts<-ts(data$price,start=c(2018,7),end=c(2020,7),frequency=365)
ma.trailing.roll = rollmean(price.ts, k = 7, align = "right")
head(price)
autoplot(price.ts,main='Oakland Airbnb Pricing from 2018 to 2020',
ylab='Airbnb Price')+
autolayer(ma.trailing.roll,series='Weekly Aggregated')
price.diff<-diff(price,1)
price.diff<-diff(price,lag(price,1))
price.diff
changeofprice = read.csv("Change_of_Price.csv")
changeofprice
changeofprice = ts(read.csv("Change_of_Price.csv")$X..Change)
changeofprice
changeofprice = read.csv("Change_of_Price.csv")
changeofprice
changeofprice <- ts(changeofprice$X..Change,start=c(2018,7),frequency=365)
changeofprice
changeofprice <- ts(changeofprice$X..Change,start=c(2018,199),frequency=365)
changeofprice = read.csv("Change_of_Price.csv")
changeofprice <- ts(changeofprice$X..Change,start=c(2018,199),frequency=365)
changeofprice
autoplot(changeofprice)
autoplot(changeofprice,main='Change of Price Lag 1',ylab='% of Change in Price;)
changeofprice = read.csv("Change_of_Price.csv")
changeofprice <- ts(changeofprice$X..Change,start=c(2018,199),frequency=365)
autoplot(changeofprice,main='Change of Price Lag 1',ylab='% of Change in Price')
changeofprice = read.csv("Change_of_Price.csv")
changeofprice <- ts(changeofprice$X..Change,start=c(2018,199),frequency=365)
autoplot(changeofprice,main='Change of Price Lag 1',ylab='% of Change in Price')
changeofprice = read.csv("Change_of_Price.csv")
changeofprice <- ts(changeofprice$X..Change,start=c(2018,199),frequency=365)
autoplot(changeofprice,main='Change of Price Lag 1',ylab='% of Change in Price')
library(lmtest)
#AR(1)
ar1<-Arima(changeofprice,order=c(1,0,0))
coeftest(ar1)
data
price.ts = ts(data$price, seq(from = c(2018,199), frequency=365))
price.ts = ts(data$price, start = c(2018,199), frequency=365))
price.ts = ts(data$price, start = c(2018,199), frequency=365)
# plot the data
autoplot(price.ts, xlab=("Time") , ylab=("Average listing price") )
ma.trailing.roll = rollmean(price.ts, k = 7, align = "right")
ma.trailing.roll
# plot the data
autoplot(price.ts,main='Airbnb Oakland Daily Pricing',
xlab=("Time") , ylab=("Average listing price") )+
autolayer(ma.trailing.roll,series='Weekly Aggregated')
ma.trailing.roll.month = rollmean(price.ts, k = 30, align = "right")
library(forecast)
price.ts = ts(data$price, start = c(2018,199), frequency=365)
ma.trailing.roll.week = rollmean(price.ts, k = 7, align = "right")
ma.trailing.roll.month = rollmean(price.ts, k = 30, align = "right")
# plot the data
autoplot(price.ts,main='Airbnb Oakland Daily Pricing',
xlab=("Time") , ylab=("Average listing price") )+
autolayer(ma.trailing.roll.week,series='Weekly Aggregated')+
autolayer(ma.trailing.roll.month,series='Monthly Aggregated')+
library(forecast)
price.ts = ts(data$price, start = c(2018,199), frequency=365)
ma.trailing.roll.week = rollmean(price.ts, k = 7, align = "right")
ma.trailing.roll.month = rollmean(price.ts, k = 30, align = "right")
# plot the data
autoplot(price.ts,main='Airbnb Oakland Daily Pricing',
xlab=("Time") , ylab=("Average listing price") )+
autolayer(ma.trailing.roll.week,series='Weekly Aggregated')+
autolayer(ma.trailing.roll.month,series='Monthly Aggregated')
ar1
price.ts = ts(data$price, start = c(2018,1), frequency=7)
#price.ts = ts(data$price, start = c(2018,197), frequency=365)
ma.trailing.roll.week = rollmean(price.ts, k = 7, align = "right")
ma.trailing.roll.month = rollmean(price.ts, k = 30, align = "right")
# plot the data
autoplot(price.ts,main='Airbnb Oakland Daily Pricing',
xlab=("Time") , ylab=("Average listing price") )+
autolayer(ma.trailing.roll.week,series='Weekly Aggregated')+
autolayer(ma.trailing.roll.month,series='Monthly Aggregated')
# import packages
library(zoo)
library(forecast)
library(ggplot2)
library(dplyr)
# read data
data = read.csv("cleaned_data.csv")
# set zoo object of price
price = zoo(data$price, seq(from = as.Date("2018-07-16"), to = as.Date("2020-07-16"), by = 1))
# plot the data
autoplot(price, xlab=("Time") , ylab=("Average listing price") )
price.ts = ts(data$price, start = c(2018,1))
#price.ts = ts(data$price, start = c(2018,197), frequency=365)
ma.trailing.roll.week = rollmean(price.ts, k = 7, align = "right")
ma.trailing.roll.month = rollmean(price.ts, k = 30, align = "right")
# plot the data
autoplot(price.ts,main='Airbnb Oakland Daily Pricing',
xlab=("Time") , ylab=("Average listing price") )+
autolayer(ma.trailing.roll.week,series='Weekly Aggregated')+
autolayer(ma.trailing.roll.month,series='Monthly Aggregated')
# read data
data = read.csv("cleaned_data.csv")
# set zoo object of price
price = zoo(data$price, seq(from = as.Date("2018-07-16"), to = as.Date("2020-07-16"), by = 1))
# plot the data
autoplot(price, xlab=("Time") , ylab=("Average listing price") )
price.ts = ts(data$price, start = c(2018,1))
#price.ts = ts(data$price, start = c(2018,197), frequency=365)
ma.trailing.roll.week = rollmean(price.ts, k = 7, align = "right")
ma.trailing.roll.month = rollmean(price.ts, k = 30, align = "right")
# plot the data
autoplot(price.ts,main='Airbnb Oakland Daily Pricing',
xlab=("Time") , ylab=("Average listing price") )+
autolayer(ma.trailing.roll.week,series='Weekly Aggregated')+
autolayer(ma.trailing.roll.month,series='Monthly Aggregated')
#price.ts = ts(data$price, start = c(2018,1), frequency=7)
price.ts = ts(data$price, start = c(2018,197), frequency=365.25)
ma.trailing.roll.week = rollmean(price.ts, k = 7, align = "right")
ma.trailing.roll.month = rollmean(price.ts, k = 30, align = "right")
# plot the data
autoplot(price.ts,main='Airbnb Oakland Daily Pricing',
xlab=("Time") , ylab=("Average listing price") )+
autolayer(ma.trailing.roll.week,series='Weekly Aggregated')+
autolayer(ma.trailing.roll.month,series='Monthly Aggregated')
price.ts = ts(data$price, start = c(2018,197), frequency=7)
#price.ts = ts(data$price, start = c(2018,197), frequency=365.25)
ma.trailing.roll.week = rollmean(price.ts, k = 7, align = "right")
ma.trailing.roll.month = rollmean(price.ts, k = 30, align = "right")
# plot the data
autoplot(price.ts,main='Airbnb Oakland Daily Pricing',
xlab=("Time") , ylab=("Average listing price") )+
autolayer(ma.trailing.roll.week,series='Weekly Aggregated')+
autolayer(ma.trailing.roll.month,series='Monthly Aggregated')
#price.ts = ts(data$price, start = c(2018,197), frequency=7)
price.ts = ts(data$price, start = c(2018,197), frequency=365)
ma.trailing.roll.week = rollmean(price.ts, k = 7, align = "right")
ma.trailing.roll.month = rollmean(price.ts, k = 30, align = "right")
# plot the data
autoplot(price.ts,main='Airbnb Oakland Daily Pricing',
xlab=("Time") , ylab=("Average listing price") )+
autolayer(ma.trailing.roll.week,series='Weekly Aggregated')+
autolayer(ma.trailing.roll.month,series='Monthly Aggregated')
# read data
data = read.csv("cleaned_data.csv")
# set zoo object of price
price = zoo(data$price, seq(from = as.Date("2018-07-16"), to = as.Date("2020-07-16"), by = 1))
# plot the data
autoplot(price, xlab=("Time") , ylab=("Average listing price") )
install.packages("changepoint")
# detect changing point
# changepoint detection methods: https://www.marinedatascience.co/blog/2019/09/28/comparison-of-change-point-detection-methods/
library(changepoint)
cpt.mean(price.ts, method = "AMOC")
# read data
data = read.csv("cleaned_data.csv")
# set zoo object of price
price = zoo(data$price, seq(from = as.Date("2018-07-16"), to = as.Date("2020-07-16"), by = 1))
# plot the data
autoplot(price, xlab=("Time") , ylab=("Average listing price") )
# load data in ts format
## price.ts = ts(data$price, start = c(2018,197), frequency=7)
price.ts = ts(data$price, start = c(2018,197), frequency=365)
?changepoint
# detect changing point
# changepoint detection methods: https://www.marinedatascience.co/blog/2019/09/28/comparison-of-change-point-detection-methods/
library(changepoint)
cpt.var(price.ts, method = "AMOC")
# detect changing point
# changepoint detection methods: https://www.marinedatascience.co/blog/2019/09/28/comparison-of-change-point-detection-methods/
library(changepoint)
cpt.meanvar(price.ts, method = "AMOC")
# detect changing point
# changepoint detection methods: https://www.marinedatascience.co/blog/2019/09/28/comparison-of-change-point-detection-methods/
library(changepoint)
cpt.meanvar(price.ts[300:], method = "AMOC")
# detect changing point
# changepoint detection methods: https://www.marinedatascience.co/blog/2019/09/28/comparison-of-change-point-detection-methods/
library(changepoint)
cpt.meanvar(price.ts[300:,], method = "AMOC")
# detect changing point
# changepoint detection methods: https://www.marinedatascience.co/blog/2019/09/28/comparison-of-change-point-detection-methods/
library(changepoint)
cpt.meanvar(price.ts[300:], method = "AMOC")
price.ts
price.ts[300:]
# detect changing point
# changepoint detection methods: https://www.marinedatascience.co/blog/2019/09/28/comparison-of-change-point-detection-methods/
library(changepoint)
cpt.meanvar(price.ts, method = "AMOC")
# detect changing point
# changepoint detection methods: https://www.marinedatascience.co/blog/2019/09/28/comparison-of-change-point-detection-methods/
library(changepoint)
cpt.meanvar(price.ts, method = "AMOC", Q=2)
# detect changing point
# changepoint detection methods: https://www.marinedatascience.co/blog/2019/09/28/comparison-of-change-point-detection-methods/
library(changepoint)
cpt.meanvar(price.ts, method = "AMOC")
price.ts.subset = subset(price.ts, start=299)
# detect changing point
# changepoint detection methods: https://www.marinedatascience.co/blog/2019/09/28/comparison-of-change-point-detection-methods/
library(changepoint)
cpt.meanvar(price.ts, method = "AMOC")
price.ts.subset = subset(price.ts, start=299)
cpt.meanvar(price.ts.subset, method = "AMOC")
View(data)
# detect changing point
# changepoint detection methods: https://www.marinedatascience.co/blog/2019/09/28/comparison-of-change-point-detection-methods/
library(changepoint)
cpt.meanvar(price.ts, method = "AMOC")
price.ts.subset = subset(price.ts, start=299)
cpt.meanvar(price.ts.subset, method = "AMOC")
data[547]
# detect changing point
# changepoint detection methods: https://www.marinedatascience.co/blog/2019/09/28/comparison-of-change-point-detection-methods/
library(changepoint)
cpt.meanvar(price.ts, method = "AMOC")
price.ts.subset = subset(price.ts, start=299)
cpt.meanvar(price.ts.subset, method = "AMOC")
data[547,]
